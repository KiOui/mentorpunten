---

name: "Linting"
on:
  - push

jobs:
  lint-backend:
    name: "Linting Backend"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:

      - name: "Checkout the repository"
        uses: actions/checkout@v2

      - name: "Setup Python"
        uses: actions/setup-python@v1
        with:
          python-version: '3.11'

      - name: "Install Poetry"
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: "Restore any cached Poetry dependencies"
        uses: actions/cache@v1
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: "Install any new dependencies"
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: "Run Black"
        run: poetry run black --quiet --check website

      - name: "Run flake8"
        run: >-
          poetry run
          flake8
          --exclude="migrations,website/mentorpunten/settings/*.py"
          --max-line-length=119
          website

      - name: "Run PyDocStyle"
        run: poetry run pydocstyle --explain --add-ignore=D100,D104 --match-dir='(?!migrations).*'

  lint-frontend:
    name: "Linting Frontend"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:

      - name: "Checkout the repository"
        uses: actions/checkout@v2

      - name: "Setup Node"
        uses: actions/setup-node@v3
        with:
          node-version: '17.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: "Run ESLint"
        run: npm run lint
